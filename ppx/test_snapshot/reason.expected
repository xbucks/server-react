module React_component_without_props =
  struct
    let make ~lola  ~cosis  ?key  =
      ((fun ~lola ->
          ((fun ~cosis ->
              ((Js.log cosis;
                React.createElement "div"
                  ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                     |> Array.of_list)
                  [((React.string lola)[@reason.preserve_braces ])])
              [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
  end
let make ?name  ?key  =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      ((React.Fragment.make
          [React.createElement "div"
             ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                Array.of_list)
             [((React.string
                  ((("First ")[@reason.raw_literal "First "]) ^ name))
             [@reason.preserve_braces ])];
          Hello.make ~one:(("1")[@reason.raw_literal "1"])
            ~children:((React.string
                          ((("2nd ")[@reason.raw_literal "2nd "]) ^ name))
            [@reason.preserve_braces ]) ()] ())
      [@reason.preserve_braces ]))
  [@warning "-16"])
module Memo =
  struct
    let make ~a  ?key  =
      ((fun ~a ->
          ((React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(((Printf.sprintf (("`a` is %s")
                    [@reason.raw_literal "`a` is %s"]) a)
                   |> React.string)
              [@reason.preserve_braces ])])
          [@reason.preserve_braces ]))
      [@warning "-16"])
  end
module MemoCustomCompareProps =
  struct
    let make ~a  ?key  =
      ((fun ~a ->
          ((React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(((Printf.sprintf (("`a` is %d")
                    [@reason.raw_literal "`a` is %d"]) a)
                   |> React.string)
              [@reason.preserve_braces ])])
          [@reason.preserve_braces ]))
      [@warning "-16"])
  end
module App =
  struct
    let make ?key  () =
      ((React.createElement "html"
          ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
             Array.of_list)
          [React.createElement "head"
             ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                Array.of_list)
             [React.createElement "title"
                ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                   |> Array.of_list)
                [((React.string (("SSR React")
                     [@reason.raw_literal "SSR React"]))
                [@reason.preserve_braces ])]];
          React.createElement "body"
            ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
               Array.of_list)
            [React.createElement "div"
               ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                  |> Array.of_list)
               [React.createElement "h1"
                  ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                     |> Array.of_list)
                  [((React.string (("Wat")[@reason.raw_literal "Wat"]))
                  [@reason.preserve_braces ])]];
            React.createElement "script"
              ((([|(Some
                      (React.Attribute.String
                         ("src", ((("/static/client.js")
                           [@reason.raw_literal "/static/client.js"]) : 
                           string))))|]
                   |> Array.to_list)
                  |> (List.filter_map (fun a -> a)))
                 |> Array.of_list) []]])
      [@reason.preserve_braces ])
  end
