let lower =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) []
let lower_with_empty_attr =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.String
               ("className", ((("")[@reason.raw_literal ""]) : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_with_style =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.Style
               ((ReactDOM.Style.make ~backgroundColor:(("gainsboro")
                   [@reason.raw_literal "gainsboro"]) ())
               [@reason.preserve_braces ])))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_inner_html =
  React.createElement "div"
    ((([|(Some (React.Attribute.DangerouslyInnerHtml text))|] |>
         Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_opt_attr =
  React.createElement "div"
    ((([|(Option.map
            (fun v -> React.Attribute.String ("tabIndex", (string_of_int v)))
            (tabIndex : int option))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let upper = Input.make ()
module React_component_without_props =
  struct
    let make =
      ((fun ~lola ->
          ((fun ~cosis ->
              fun () ->
                ((Js.log cosis;
                  React.createElement "div"
                    ((([||] |> Array.to_list) |>
                        (List.filter_map (fun a -> a)))
                       |> Array.of_list)
                    [((React.string lola)[@reason.preserve_braces ])])
                [@reason.preserve_braces ]))
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
let upper =
  React_component_without_props.make ~lola:(("flores")
    [@reason.raw_literal "flores"]) ()
let make =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      fun () ->
        ((React.Fragment.make
            [React.createElement "div"
               ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                  |> Array.of_list)
               [((React.string
                    ((("First ")[@reason.raw_literal "First "]) ^ name))
               [@reason.preserve_braces ])];
            Hello.make ~one:(("1")[@reason.raw_literal "1"])
              ~children:((React.string
                            ((("2nd ")[@reason.raw_literal "2nd "]) ^ name))
              [@reason.preserve_braces ]) ()] ())
        [@reason.preserve_braces ]))
  [@warning "-16"][@warning "-16"])
module Memo =
  struct
    let make =
      ((fun ~a ->
          fun () ->
            ((React.createElement "div"
                ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                   |> Array.of_list)
                [(((Printf.sprintf (("`a` is %s")
                      [@reason.raw_literal "`a` is %s"]) a)
                     |> React.string)
                [@reason.preserve_braces ])])
            [@reason.preserve_braces ]))
      [@warning "-16"][@warning "-16"])
  end
module MemoCustomCompareProps =
  struct
    let make =
      ((fun ~a ->
          fun () ->
            ((React.createElement "div"
                ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                   |> Array.of_list)
                [(((Printf.sprintf (("`a` is %d")
                      [@reason.raw_literal "`a` is %d"]) a)
                     |> React.string)
                [@reason.preserve_braces ])])
            [@reason.preserve_braces ]))
      [@warning "-16"][@warning "-16"])
  end
module App =
  struct
    let make () =
      ((React.createElement "html"
          ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
             Array.of_list)
          [React.createElement "head"
             ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                Array.of_list)
             [React.createElement "title"
                ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                   |> Array.of_list)
                [((React.string (("SSR React")
                     [@reason.raw_literal "SSR React"]))
                [@reason.preserve_braces ])]];
          React.createElement "body"
            ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
               Array.of_list)
            [React.createElement "div"
               ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                  |> Array.of_list)
               [React.createElement "h1"
                  ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                     |> Array.of_list)
                  [((React.string (("Wat")[@reason.raw_literal "Wat"]))
                  [@reason.preserve_braces ])]];
            React.createElement "script"
              ((([|(Some
                      (React.Attribute.String
                         ("src", ((("/static/client.js")
                           [@reason.raw_literal "/static/client.js"]) : 
                           string))))|]
                   |> Array.to_list)
                  |> (List.filter_map (fun a -> a)))
                 |> Array.of_list) []]])
      [@reason.preserve_braces ])
  end
let () = Dream.run ()
let l = 33
module Page =
  struct
    let make =
      ((fun ~children ->
          ((fun ~moreProps ->
              fun () ->
                ((React.createElement "html"
                    ((([||] |> Array.to_list) |>
                        (List.filter_map (fun a -> a)))
                       |> Array.of_list)
                    [React.createElement "head"
                       ((([||] |> Array.to_list) |>
                           (List.filter_map (fun a -> a)))
                          |> Array.of_list)
                       [React.createElement "title"
                          ((([||] |> Array.to_list) |>
                              (List.filter_map (fun a -> a)))
                             |> Array.of_list)
                          [((React.string
                               ((("SSR React ")
                                  [@reason.raw_literal "SSR React "]) ^
                                  moreProps))
                          [@reason.preserve_braces ])]];
                    React.createElement "body"
                      ((([||] |> Array.to_list) |>
                          (List.filter_map (fun a -> a)))
                         |> Array.of_list)
                      [React.createElement "div"
                         ((([|(Some
                                 (React.Attribute.String
                                    ("id", ((("root")
                                      [@reason.raw_literal "root"]) : 
                                      string))))|]
                              |> Array.to_list)
                             |> (List.filter_map (fun a -> a)))
                            |> Array.of_list) [children];
                      React.createElement "script"
                        ((([|(Some
                                (React.Attribute.String
                                   ("src", ((("/static/client.js")
                                     [@reason.raw_literal
                                       "/static/client.js"]) : string))))|]
                             |> Array.to_list)
                            |> (List.filter_map (fun a -> a)))
                           |> Array.of_list) []]])
                [@reason.preserve_braces ]))
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
let upperWithChildren =
  Page.make ~moreProps:(("hgalo")[@reason.raw_literal "hgalo"])
    ~children:(React.createElement "h1"
                 ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                    |> Array.of_list)
                 [((React.string (("Yep")[@reason.raw_literal "Yep"]))
                 [@reason.preserve_braces ])]) ()
